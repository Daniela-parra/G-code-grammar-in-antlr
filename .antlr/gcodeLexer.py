# Generated from gcode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,102,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,4,0,
        28,8,0,11,0,12,0,29,1,1,1,1,4,1,34,8,1,11,1,12,1,35,1,2,1,2,4,2,
        40,8,2,11,2,12,2,41,1,3,1,3,4,3,46,8,3,11,3,12,3,47,1,4,1,4,4,4,
        52,8,4,11,4,12,4,53,1,5,1,5,1,6,1,6,1,7,3,7,61,8,7,1,7,4,7,64,8,
        7,11,7,12,7,65,1,7,1,7,4,7,70,8,7,11,7,12,7,71,3,7,74,8,7,1,8,1,
        8,1,9,3,9,79,8,9,1,9,1,9,1,9,1,9,1,10,4,10,86,8,10,11,10,12,10,87,
        1,10,1,10,1,11,1,11,5,11,94,8,11,10,11,12,11,97,9,11,1,11,1,11,1,
        11,1,11,1,95,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,1,0,4,2,0,69,69,88,90,5,0,65,68,70,73,75,78,80,82,84,
        87,1,0,48,57,2,0,9,9,32,32,113,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,
        3,31,1,0,0,0,5,37,1,0,0,0,7,43,1,0,0,0,9,49,1,0,0,0,11,55,1,0,0,
        0,13,57,1,0,0,0,15,60,1,0,0,0,17,75,1,0,0,0,19,78,1,0,0,0,21,85,
        1,0,0,0,23,91,1,0,0,0,25,27,5,71,0,0,26,28,3,17,8,0,27,26,1,0,0,
        0,28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,2,1,0,0,0,31,33,5,
        77,0,0,32,34,3,17,8,0,33,32,1,0,0,0,34,35,1,0,0,0,35,33,1,0,0,0,
        35,36,1,0,0,0,36,4,1,0,0,0,37,39,5,84,0,0,38,40,3,17,8,0,39,38,1,
        0,0,0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,6,1,0,0,0,43,
        45,5,70,0,0,44,46,3,17,8,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,
        0,0,47,48,1,0,0,0,48,8,1,0,0,0,49,51,5,83,0,0,50,52,3,17,8,0,51,
        50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,10,1,0,0,
        0,55,56,7,0,0,0,56,12,1,0,0,0,57,58,7,1,0,0,58,14,1,0,0,0,59,61,
        5,45,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,64,3,17,8,
        0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,73,
        1,0,0,0,67,69,5,46,0,0,68,70,3,17,8,0,69,68,1,0,0,0,70,71,1,0,0,
        0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,67,1,0,0,0,73,74,
        1,0,0,0,74,16,1,0,0,0,75,76,7,2,0,0,76,18,1,0,0,0,77,79,5,13,0,0,
        78,77,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,5,10,0,0,81,82,1,
        0,0,0,82,83,6,9,0,0,83,20,1,0,0,0,84,86,7,3,0,0,85,84,1,0,0,0,86,
        87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,6,10,
        0,0,90,22,1,0,0,0,91,95,5,59,0,0,92,94,9,0,0,0,93,92,1,0,0,0,94,
        97,1,0,0,0,95,96,1,0,0,0,95,93,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,
        0,98,99,5,10,0,0,99,100,1,0,0,0,100,101,6,11,0,0,101,24,1,0,0,0,
        13,0,29,35,41,47,53,60,65,71,73,78,87,95,1,6,0,0
    ]

class gcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    GCODE = 1
    MCODE = 2
    TCODE = 3
    FCODE = 4
    SCODE = 5
    AXIS = 6
    LETTER = 7
    NUMBER = 8
    DIGIT = 9
    NEWLINE = 10
    WHITESPACE = 11
    COMMENT = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", "AXIS", "LETTER", 
            "NUMBER", "DIGIT", "NEWLINE", "WHITESPACE", "COMMENT" ]

    ruleNames = [ "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", "AXIS", "LETTER", 
                  "NUMBER", "DIGIT", "NEWLINE", "WHITESPACE", "COMMENT" ]

    grammarFileName = "gcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


