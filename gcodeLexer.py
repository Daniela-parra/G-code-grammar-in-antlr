# Generated from gcode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,5,0,
        28,8,0,10,0,12,0,31,9,0,1,0,1,0,1,1,1,1,4,1,37,8,1,11,1,12,1,38,
        1,2,1,2,4,2,43,8,2,11,2,12,2,44,1,3,1,3,4,3,49,8,3,11,3,12,3,50,
        1,4,1,4,4,4,55,8,4,11,4,12,4,56,1,5,1,5,4,5,61,8,5,11,5,12,5,62,
        1,6,1,6,1,7,1,7,1,8,3,8,70,8,8,1,8,4,8,73,8,8,11,8,12,8,74,1,8,1,
        8,4,8,79,8,8,11,8,12,8,80,3,8,83,8,8,1,9,1,9,1,10,3,10,88,8,10,1,
        10,1,10,1,10,1,10,1,11,4,11,95,8,11,11,11,12,11,96,1,11,1,11,0,0,
        12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,
        5,2,0,10,10,13,13,2,0,69,69,88,90,5,0,65,68,70,73,75,78,80,82,84,
        87,1,0,48,57,2,0,9,9,32,32,111,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,
        3,34,1,0,0,0,5,40,1,0,0,0,7,46,1,0,0,0,9,52,1,0,0,0,11,58,1,0,0,
        0,13,64,1,0,0,0,15,66,1,0,0,0,17,69,1,0,0,0,19,84,1,0,0,0,21,87,
        1,0,0,0,23,94,1,0,0,0,25,29,5,59,0,0,26,28,8,0,0,0,27,26,1,0,0,0,
        28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,32,1,0,0,0,31,29,1,
        0,0,0,32,33,6,0,0,0,33,2,1,0,0,0,34,36,5,71,0,0,35,37,3,19,9,0,36,
        35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,4,1,0,0,
        0,40,42,5,77,0,0,41,43,3,19,9,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,
        1,0,0,0,44,45,1,0,0,0,45,6,1,0,0,0,46,48,5,84,0,0,47,49,3,19,9,0,
        48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,8,1,0,
        0,0,52,54,5,70,0,0,53,55,3,19,9,0,54,53,1,0,0,0,55,56,1,0,0,0,56,
        54,1,0,0,0,56,57,1,0,0,0,57,10,1,0,0,0,58,60,5,83,0,0,59,61,3,19,
        9,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,12,
        1,0,0,0,64,65,7,1,0,0,65,14,1,0,0,0,66,67,7,2,0,0,67,16,1,0,0,0,
        68,70,5,45,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,73,3,
        19,9,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,
        82,1,0,0,0,76,78,5,46,0,0,77,79,3,19,9,0,78,77,1,0,0,0,79,80,1,0,
        0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,76,1,0,0,0,82,83,
        1,0,0,0,83,18,1,0,0,0,84,85,7,3,0,0,85,20,1,0,0,0,86,88,5,13,0,0,
        87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,5,10,0,0,90,91,1,
        0,0,0,91,92,6,10,0,0,92,22,1,0,0,0,93,95,7,4,0,0,94,93,1,0,0,0,95,
        96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,99,6,11,
        0,0,99,24,1,0,0,0,13,0,29,38,44,50,56,62,69,74,80,82,87,96,1,6,0,
        0
    ]

class gcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 1
    GCODE = 2
    MCODE = 3
    TCODE = 4
    FCODE = 5
    SCODE = 6
    AXIS = 7
    LETTER = 8
    NUMBER = 9
    DIGIT = 10
    NEWLINE = 11
    WHITESPACE = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", "AXIS", 
            "LETTER", "NUMBER", "DIGIT", "NEWLINE", "WHITESPACE" ]

    ruleNames = [ "COMMENT", "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", 
                  "AXIS", "LETTER", "NUMBER", "DIGIT", "NEWLINE", "WHITESPACE" ]

    grammarFileName = "gcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


