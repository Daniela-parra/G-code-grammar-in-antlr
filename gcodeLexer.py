# Generated from gcode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,93,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,4,0,24,8,0,11,0,12,0,25,1,
        1,1,1,4,1,30,8,1,11,1,12,1,31,1,2,1,2,4,2,36,8,2,11,2,12,2,37,1,
        3,1,3,4,3,42,8,3,11,3,12,3,43,1,4,1,4,4,4,48,8,4,11,4,12,4,49,1,
        5,1,5,1,6,4,6,55,8,6,11,6,12,6,56,1,6,1,6,4,6,61,8,6,11,6,12,6,62,
        3,6,65,8,6,1,7,4,7,68,8,7,11,7,12,7,69,1,7,1,7,4,7,74,8,7,11,7,12,
        7,75,3,7,78,8,7,1,8,3,8,81,8,8,1,8,1,8,1,8,1,8,1,9,4,9,88,8,9,11,
        9,12,9,89,1,9,1,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,1,0,3,1,0,65,90,1,0,48,57,2,0,9,9,32,32,105,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,27,
        1,0,0,0,5,33,1,0,0,0,7,39,1,0,0,0,9,45,1,0,0,0,11,51,1,0,0,0,13,
        54,1,0,0,0,15,67,1,0,0,0,17,80,1,0,0,0,19,87,1,0,0,0,21,23,5,71,
        0,0,22,24,3,15,7,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,25,
        26,1,0,0,0,26,2,1,0,0,0,27,29,5,77,0,0,28,30,3,15,7,0,29,28,1,0,
        0,0,30,31,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,4,1,0,0,0,33,35,
        5,84,0,0,34,36,3,15,7,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,
        0,37,38,1,0,0,0,38,6,1,0,0,0,39,41,5,70,0,0,40,42,3,15,7,0,41,40,
        1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,8,1,0,0,0,45,
        47,5,83,0,0,46,48,3,15,7,0,47,46,1,0,0,0,48,49,1,0,0,0,49,47,1,0,
        0,0,49,50,1,0,0,0,50,10,1,0,0,0,51,52,7,0,0,0,52,12,1,0,0,0,53,55,
        3,15,7,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,
        57,64,1,0,0,0,58,60,5,46,0,0,59,61,3,15,7,0,60,59,1,0,0,0,61,62,
        1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,58,1,0,0,0,
        64,65,1,0,0,0,65,14,1,0,0,0,66,68,7,1,0,0,67,66,1,0,0,0,68,69,1,
        0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,77,1,0,0,0,71,73,5,46,0,0,72,
        74,7,1,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,
        0,76,78,1,0,0,0,77,71,1,0,0,0,77,78,1,0,0,0,78,16,1,0,0,0,79,81,
        5,13,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,5,10,0,
        0,83,84,1,0,0,0,84,85,6,8,0,0,85,18,1,0,0,0,86,88,7,2,0,0,87,86,
        1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,
        91,92,6,9,0,0,92,20,1,0,0,0,14,0,25,31,37,43,49,56,62,64,69,75,77,
        80,89,1,6,0,0
    ]

class gcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    GCODE = 1
    MCODE = 2
    TCODE = 3
    FCODE = 4
    SCODE = 5
    LETTER = 6
    NUMBER = 7
    DIGIT = 8
    NEWLINE = 9
    WHITESPACE = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", "LETTER", "NUMBER", 
            "DIGIT", "NEWLINE", "WHITESPACE" ]

    ruleNames = [ "GCODE", "MCODE", "TCODE", "FCODE", "SCODE", "LETTER", 
                  "NUMBER", "DIGIT", "NEWLINE", "WHITESPACE" ]

    grammarFileName = "gcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


